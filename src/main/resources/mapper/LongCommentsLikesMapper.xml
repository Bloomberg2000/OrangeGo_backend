<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbcourse.curriculum_design.mapper.LongCommentsLikesMapper">
  <resultMap id="BaseResultMap" type="com.dbcourse.curriculum_design.model.LongCommentsLikes">
    <!--@mbg.generated-->
    <!--@Table dbo.LongCommentsLikes-->
    <id column="n_id" jdbcType="INTEGER" property="nId" />
    <result column="n_long_comment_id" jdbcType="INTEGER" property="nLongCommentId" />
    <result column="n_user_id" jdbcType="INTEGER" property="nUserId" />
    <result column="n_type" jdbcType="INTEGER" property="nType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    n_id, n_long_comment_id, n_user_id, n_type
  </sql>
  <select id="selectByExample" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikesExample" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from dbo.LongCommentsLikes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from dbo.LongCommentsLikes
    where n_id = #{nId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from dbo.LongCommentsLikes
    where n_id = #{nId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikesExample">
    <!--@mbg.generated-->
    delete from dbo.LongCommentsLikes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="n_id" keyProperty="nId" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikes" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into dbo.LongCommentsLikes (n_long_comment_id, n_user_id, n_type
      )
    values (#{nLongCommentId,jdbcType=INTEGER}, #{nUserId,jdbcType=INTEGER}, #{nType,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="n_id" keyProperty="nId" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikes" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into dbo.LongCommentsLikes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nLongCommentId != null">
        n_long_comment_id,
      </if>
      <if test="nUserId != null">
        n_user_id,
      </if>
      <if test="nType != null">
        n_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nLongCommentId != null">
        #{nLongCommentId,jdbcType=INTEGER},
      </if>
      <if test="nUserId != null">
        #{nUserId,jdbcType=INTEGER},
      </if>
      <if test="nType != null">
        #{nType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikesExample" resultType="java.lang.Long">
    <!--@mbg.generated-->
    select count(*) from dbo.LongCommentsLikes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbg.generated-->
    update dbo.LongCommentsLikes
    <set>
      <if test="record.nId != null">
        n_id = #{record.nId,jdbcType=INTEGER},
      </if>
      <if test="record.nLongCommentId != null">
        n_long_comment_id = #{record.nLongCommentId,jdbcType=INTEGER},
      </if>
      <if test="record.nUserId != null">
        n_user_id = #{record.nUserId,jdbcType=INTEGER},
      </if>
      <if test="record.nType != null">
        n_type = #{record.nType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbg.generated-->
    update dbo.LongCommentsLikes
    set n_id = #{record.nId,jdbcType=INTEGER},
      n_long_comment_id = #{record.nLongCommentId,jdbcType=INTEGER},
      n_user_id = #{record.nUserId,jdbcType=INTEGER},
      n_type = #{record.nType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikes">
    <!--@mbg.generated-->
    update dbo.LongCommentsLikes
    <set>
      <if test="nLongCommentId != null">
        n_long_comment_id = #{nLongCommentId,jdbcType=INTEGER},
      </if>
      <if test="nUserId != null">
        n_user_id = #{nUserId,jdbcType=INTEGER},
      </if>
      <if test="nType != null">
        n_type = #{nType,jdbcType=INTEGER},
      </if>
    </set>
    where n_id = #{nId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dbcourse.curriculum_design.model.LongCommentsLikes">
    <!--@mbg.generated-->
    update dbo.LongCommentsLikes
    set n_long_comment_id = #{nLongCommentId,jdbcType=INTEGER},
      n_user_id = #{nUserId,jdbcType=INTEGER},
      n_type = #{nType,jdbcType=INTEGER}
    where n_id = #{nId,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" keyColumn="n_id" keyProperty="nId" parameterType="map" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into dbo.LongCommentsLikes
    (n_long_comment_id, n_user_id, n_type)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.nLongCommentId,jdbcType=INTEGER}, #{item.nUserId,jdbcType=INTEGER}, #{item.nType,jdbcType=INTEGER}
        )
    </foreach>
  </insert>
</mapper>